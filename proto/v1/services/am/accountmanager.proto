syntax = "proto3";

option go_package = "api/gen";
package ubt.services.am;

/*
  Account Manager basically provide a box which stores private keys and allows to sign payloads using them
  Accounts are identified by address and optionally by name
  Name can be formatted as a path to allow for nested namespaces which then can be used to filter accounts
*/

message CreateAccountRequest {
  string chain_type = 1;
  bytes  private_key = 2;   // if not specified will be generated based on network type
  string name = 3;          // optional unique name associated with account. Can be separated by / to make nested namespaces
}

message CreateAccountResponse {
  string address = 1;
}

message SignPayloadRequest {
  string chain_type = 1;
  bytes data = 2;
  string address = 3; // address or name must be specified
  string name = 4; // if specified use it to lookup existing account by name
}

message SignPayloadResponse {
  bytes signature = 1;
}

message GetStoredAccountRequest {
  string address = 1; // lookup by address
  string name = 2;   // lookup by name
}

message GetStoredAccountResponse {
  string address = 1;
  string name = 2;
}

message ListAccountsRequest {
  string name_filter = 1; // return only accounts with name starting with this name
}

message ListAccountsResponse {
  message Account {
    string address = 1;
    string name = 2;
  }
  repeated Account accounts = 1;
}

service UbtAccountManager {
  // Creates a new random account or import existing private key
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);

  // Retrieves an existing account.
  // The request can specify either an address or a name for lookup.
  rpc GetAccount(GetStoredAccountRequest) returns (GetStoredAccountResponse);

  // Lists all accounts that match the provided name filter.
  // The name filter is used to return only accounts with names starting with the specified string.
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

  // Signs an arbitrary payload with the specified account.
  // The response contains the signature.
  rpc SignPayload(SignPayloadRequest) returns (SignPayloadResponse);
}