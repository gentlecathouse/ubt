syntax = "proto3";
package ubt.services;

option java_multiple_files = true;
option go_package = "api/gen";

import "commons.proto";
import "models.proto";

message BlockRequest {
  ChainId chain_id = 1;
  bytes id = 2;
}

message ListBlocksRequest {
  ChainId chain_id = 1;
  uint64 start_number = 2;
  optional uint64 count = 3;

  enum IncludeFlags {
    HEADER = 0;          // include only block header
    TRANSACTIONS = 0x01; // include transactions with header
    FULL = 0x04;         // include full available data
  }
  uint32 includes = 4;   // 1 - transactions, 2 - receipts, 4 - operations

  FinalityStatus finality_status = 5;    // return only blocks with that or greater finalization status
}

message GetAccountRequest {
  ChainId chain_id = 1;
  string address = 2;
}

message DeriveAccountRequest {
  ChainId chain_id = 1;
  string public_key = 2;
}

/**
 * Simple access to block and block information. In most cases does not require any indexing/storage to implement
 */
service UbtBlockService {
  //  Fetch block by ID
  rpc getBlock(BlockRequest) returns (Block);
  // List blocks in range
  rpc listBlocks(ListBlocksRequest) returns (stream Block);
  // get account
  rpc getAccount(GetAccountRequest) returns (Account);
  // return account/address by public key
  rpc deriveAccount(DeriveAccountRequest) returns (Account);
}