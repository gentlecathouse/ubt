syntax = "proto3";
package ubt.services;

option java_multiple_files = true;
option go_package = "api/gen";

import "commons.proto";
import "models.proto";

message CreateTransferRequest {
  ChainId chain_id = 1;
  string from = 2;
  string to = 3;
  CurrencyAmount amount = 4;
}

message TransferReceiver {
  string to = 1;
  CurrencyAmount amount = 2;
}

message CreateBatchTransferRequest {
  string from = 1;  //TODO utxo
  repeated TransferReceiver to = 2;
}

/**
 * Payload which should be signed by keypair indicated by account_id
 * It is applicable for multiple inputs or multisign.
*/
message Signable {
  bytes data = 1;
  bytes account_id = 2;       // identifier of keypair (hd path, address, public key, etc.)
  string signature_type = 3;  // type of the signature client must use to sign the payload
  string address = 4;         // address of the account
}

message TransactionIntent {
  bytes id = 1;
  repeated Signable signables = 2; // prepared binary payloads to sign
  //string signature_type = 3;       //
  uint256 estimated_fee = 4;       // estimated fee for the transaction TODO: drilldown by fee components and their price
  bytes raw_data = 5;              // raw transaction data

}

message TransactionCombineRequest {
  ChainId chain_id = 1;
  TransactionIntent intent = 2;
  repeated bytes signatures = 3;
}

message TransactionSignRequest {
  ChainId chain_id = 1;
  TransactionIntent intent = 2;
  bytes private_key = 3;
}

message TransactionSendRequest {
  ChainId chain_id = 1;
  TransactionIntent intent = 2;
  repeated bytes signatures = 3;
}

message SignedTransaction {
  TransactionIntent intent = 1;
  repeated bytes signatures = 2;
}

message TransactionSendResponse {
  bytes id = 1;
}

/**
  * Utilities for transaction creation, signing and sending
  */
service UbtConstructService {
  rpc createTransfer(CreateTransferRequest) returns (TransactionIntent);
  // combine transaction with signatures
  rpc combineTransaction(TransactionCombineRequest) returns (SignedTransaction);
  // sign transaction with private key; tx can also be signed offline and used directly in 'send'
  rpc signTransaction(TransactionSignRequest) returns (SignedTransaction);
  // send signed transaction to the network
  rpc send(TransactionSendRequest) returns (TransactionSendResponse);
}
