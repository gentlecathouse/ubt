// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: services/network.proto

package services

import (
	context "context"
	proto "github.com/ubtools/ubt/go/api/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UbtChainService_GetChain_FullMethodName   = "/ubt.services.UbtChainService/getChain"
	UbtChainService_ListChains_FullMethodName = "/ubt.services.UbtChainService/listChains"
)

// UbtChainServiceClient is the client API for UbtChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UbtChainServiceClient interface {
	GetChain(ctx context.Context, in *proto.ChainId, opts ...grpc.CallOption) (*proto.Chain, error)
	// rpc getChainStatus(ChainId) returns (ChainStatus);
	ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (UbtChainService_ListChainsClient, error)
}

type ubtChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUbtChainServiceClient(cc grpc.ClientConnInterface) UbtChainServiceClient {
	return &ubtChainServiceClient{cc}
}

func (c *ubtChainServiceClient) GetChain(ctx context.Context, in *proto.ChainId, opts ...grpc.CallOption) (*proto.Chain, error) {
	out := new(proto.Chain)
	err := c.cc.Invoke(ctx, UbtChainService_GetChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtChainServiceClient) ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (UbtChainService_ListChainsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UbtChainService_ServiceDesc.Streams[0], UbtChainService_ListChains_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ubtChainServiceListChainsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UbtChainService_ListChainsClient interface {
	Recv() (*proto.Chain, error)
	grpc.ClientStream
}

type ubtChainServiceListChainsClient struct {
	grpc.ClientStream
}

func (x *ubtChainServiceListChainsClient) Recv() (*proto.Chain, error) {
	m := new(proto.Chain)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UbtChainServiceServer is the server API for UbtChainService service.
// All implementations must embed UnimplementedUbtChainServiceServer
// for forward compatibility
type UbtChainServiceServer interface {
	GetChain(context.Context, *proto.ChainId) (*proto.Chain, error)
	// rpc getChainStatus(ChainId) returns (ChainStatus);
	ListChains(*ListChainsRequest, UbtChainService_ListChainsServer) error
	mustEmbedUnimplementedUbtChainServiceServer()
}

// UnimplementedUbtChainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUbtChainServiceServer struct {
}

func (UnimplementedUbtChainServiceServer) GetChain(context.Context, *proto.ChainId) (*proto.Chain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedUbtChainServiceServer) ListChains(*ListChainsRequest, UbtChainService_ListChainsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListChains not implemented")
}
func (UnimplementedUbtChainServiceServer) mustEmbedUnimplementedUbtChainServiceServer() {}

// UnsafeUbtChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UbtChainServiceServer will
// result in compilation errors.
type UnsafeUbtChainServiceServer interface {
	mustEmbedUnimplementedUbtChainServiceServer()
}

func RegisterUbtChainServiceServer(s grpc.ServiceRegistrar, srv UbtChainServiceServer) {
	s.RegisterService(&UbtChainService_ServiceDesc, srv)
}

func _UbtChainService_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.ChainId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtChainServiceServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtChainService_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtChainServiceServer).GetChain(ctx, req.(*proto.ChainId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtChainService_ListChains_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListChainsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UbtChainServiceServer).ListChains(m, &ubtChainServiceListChainsServer{stream})
}

type UbtChainService_ListChainsServer interface {
	Send(*proto.Chain) error
	grpc.ServerStream
}

type ubtChainServiceListChainsServer struct {
	grpc.ServerStream
}

func (x *ubtChainServiceListChainsServer) Send(m *proto.Chain) error {
	return x.ServerStream.SendMsg(m)
}

// UbtChainService_ServiceDesc is the grpc.ServiceDesc for UbtChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UbtChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubt.services.UbtChainService",
	HandlerType: (*UbtChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getChain",
			Handler:    _UbtChainService_GetChain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listChains",
			Handler:       _UbtChainService_ListChains_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/network.proto",
}
