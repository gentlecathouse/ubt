// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/currencies.proto

package services

import (
	context "context"
	proto "github.com/ubtr/ubt/go/api/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UbtCurrencyService_GetCurrency_FullMethodName = "/ubt.services.UbtCurrencyService/getCurrency"
)

// UbtCurrencyServiceClient is the client API for UbtCurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UbtCurrencyServiceClient interface {
	GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*proto.Currency, error)
}

type ubtCurrencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUbtCurrencyServiceClient(cc grpc.ClientConnInterface) UbtCurrencyServiceClient {
	return &ubtCurrencyServiceClient{cc}
}

func (c *ubtCurrencyServiceClient) GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*proto.Currency, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.Currency)
	err := c.cc.Invoke(ctx, UbtCurrencyService_GetCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UbtCurrencyServiceServer is the server API for UbtCurrencyService service.
// All implementations must embed UnimplementedUbtCurrencyServiceServer
// for forward compatibility.
type UbtCurrencyServiceServer interface {
	GetCurrency(context.Context, *GetCurrencyRequest) (*proto.Currency, error)
	mustEmbedUnimplementedUbtCurrencyServiceServer()
}

// UnimplementedUbtCurrencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUbtCurrencyServiceServer struct{}

func (UnimplementedUbtCurrencyServiceServer) GetCurrency(context.Context, *GetCurrencyRequest) (*proto.Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedUbtCurrencyServiceServer) mustEmbedUnimplementedUbtCurrencyServiceServer() {}
func (UnimplementedUbtCurrencyServiceServer) testEmbeddedByValue()                            {}

// UnsafeUbtCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UbtCurrencyServiceServer will
// result in compilation errors.
type UnsafeUbtCurrencyServiceServer interface {
	mustEmbedUnimplementedUbtCurrencyServiceServer()
}

func RegisterUbtCurrencyServiceServer(s grpc.ServiceRegistrar, srv UbtCurrencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedUbtCurrencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UbtCurrencyService_ServiceDesc, srv)
}

func _UbtCurrencyService_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtCurrencyServiceServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtCurrencyService_GetCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtCurrencyServiceServer).GetCurrency(ctx, req.(*GetCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UbtCurrencyService_ServiceDesc is the grpc.ServiceDesc for UbtCurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UbtCurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubt.services.UbtCurrencyService",
	HandlerType: (*UbtCurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCurrency",
			Handler:    _UbtCurrencyService_GetCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/currencies.proto",
}
