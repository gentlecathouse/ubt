// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/construct.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UbtConstructService_CreateTransfer_FullMethodName     = "/ubt.services.UbtConstructService/createTransfer"
	UbtConstructService_CombineTransaction_FullMethodName = "/ubt.services.UbtConstructService/combineTransaction"
	UbtConstructService_SignTransaction_FullMethodName    = "/ubt.services.UbtConstructService/signTransaction"
	UbtConstructService_Send_FullMethodName               = "/ubt.services.UbtConstructService/send"
)

// UbtConstructServiceClient is the client API for UbtConstructService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Utilities for transaction creation, signing and sending
type UbtConstructServiceClient interface {
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*TransactionIntent, error)
	// combine transaction with signatures
	CombineTransaction(ctx context.Context, in *TransactionCombineRequest, opts ...grpc.CallOption) (*SignedTransaction, error)
	// sign transaction with private key; tx can also be signed offline and used directly in 'send'
	SignTransaction(ctx context.Context, in *TransactionSignRequest, opts ...grpc.CallOption) (*SignedTransaction, error)
	// send signed transaction to the network
	Send(ctx context.Context, in *TransactionSendRequest, opts ...grpc.CallOption) (*TransactionSendResponse, error)
}

type ubtConstructServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUbtConstructServiceClient(cc grpc.ClientConnInterface) UbtConstructServiceClient {
	return &ubtConstructServiceClient{cc}
}

func (c *ubtConstructServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*TransactionIntent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionIntent)
	err := c.cc.Invoke(ctx, UbtConstructService_CreateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtConstructServiceClient) CombineTransaction(ctx context.Context, in *TransactionCombineRequest, opts ...grpc.CallOption) (*SignedTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedTransaction)
	err := c.cc.Invoke(ctx, UbtConstructService_CombineTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtConstructServiceClient) SignTransaction(ctx context.Context, in *TransactionSignRequest, opts ...grpc.CallOption) (*SignedTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedTransaction)
	err := c.cc.Invoke(ctx, UbtConstructService_SignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtConstructServiceClient) Send(ctx context.Context, in *TransactionSendRequest, opts ...grpc.CallOption) (*TransactionSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionSendResponse)
	err := c.cc.Invoke(ctx, UbtConstructService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UbtConstructServiceServer is the server API for UbtConstructService service.
// All implementations must embed UnimplementedUbtConstructServiceServer
// for forward compatibility.
//
// *
// Utilities for transaction creation, signing and sending
type UbtConstructServiceServer interface {
	CreateTransfer(context.Context, *CreateTransferRequest) (*TransactionIntent, error)
	// combine transaction with signatures
	CombineTransaction(context.Context, *TransactionCombineRequest) (*SignedTransaction, error)
	// sign transaction with private key; tx can also be signed offline and used directly in 'send'
	SignTransaction(context.Context, *TransactionSignRequest) (*SignedTransaction, error)
	// send signed transaction to the network
	Send(context.Context, *TransactionSendRequest) (*TransactionSendResponse, error)
	mustEmbedUnimplementedUbtConstructServiceServer()
}

// UnimplementedUbtConstructServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUbtConstructServiceServer struct{}

func (UnimplementedUbtConstructServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*TransactionIntent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedUbtConstructServiceServer) CombineTransaction(context.Context, *TransactionCombineRequest) (*SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombineTransaction not implemented")
}
func (UnimplementedUbtConstructServiceServer) SignTransaction(context.Context, *TransactionSignRequest) (*SignedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedUbtConstructServiceServer) Send(context.Context, *TransactionSendRequest) (*TransactionSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedUbtConstructServiceServer) mustEmbedUnimplementedUbtConstructServiceServer() {}
func (UnimplementedUbtConstructServiceServer) testEmbeddedByValue()                             {}

// UnsafeUbtConstructServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UbtConstructServiceServer will
// result in compilation errors.
type UnsafeUbtConstructServiceServer interface {
	mustEmbedUnimplementedUbtConstructServiceServer()
}

func RegisterUbtConstructServiceServer(s grpc.ServiceRegistrar, srv UbtConstructServiceServer) {
	// If the following call pancis, it indicates UnimplementedUbtConstructServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UbtConstructService_ServiceDesc, srv)
}

func _UbtConstructService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtConstructServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtConstructService_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtConstructServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtConstructService_CombineTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCombineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtConstructServiceServer).CombineTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtConstructService_CombineTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtConstructServiceServer).CombineTransaction(ctx, req.(*TransactionCombineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtConstructService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtConstructServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtConstructService_SignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtConstructServiceServer).SignTransaction(ctx, req.(*TransactionSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtConstructService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtConstructServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UbtConstructService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtConstructServiceServer).Send(ctx, req.(*TransactionSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UbtConstructService_ServiceDesc is the grpc.ServiceDesc for UbtConstructService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UbtConstructService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubt.services.UbtConstructService",
	HandlerType: (*UbtConstructServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTransfer",
			Handler:    _UbtConstructService_CreateTransfer_Handler,
		},
		{
			MethodName: "combineTransaction",
			Handler:    _UbtConstructService_CombineTransaction_Handler,
		},
		{
			MethodName: "signTransaction",
			Handler:    _UbtConstructService_SignTransaction_Handler,
		},
		{
			MethodName: "send",
			Handler:    _UbtConstructService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/construct.proto",
}
