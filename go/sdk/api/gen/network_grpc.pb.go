// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/network.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UbtNetworkServiceClient is the client API for UbtNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UbtNetworkServiceClient interface {
	GetNetwork(ctx context.Context, in *NetworkId, opts ...grpc.CallOption) (*Network, error)
	// rpc getNetworkStatus(NetworkId) returns (NetworkStatus);
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (UbtNetworkService_ListNetworksClient, error)
}

type ubtNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUbtNetworkServiceClient(cc grpc.ClientConnInterface) UbtNetworkServiceClient {
	return &ubtNetworkServiceClient{cc}
}

func (c *ubtNetworkServiceClient) GetNetwork(ctx context.Context, in *NetworkId, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/ubt.services.UbtNetworkService/getNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtNetworkServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (UbtNetworkService_ListNetworksClient, error) {
	stream, err := c.cc.NewStream(ctx, &UbtNetworkService_ServiceDesc.Streams[0], "/ubt.services.UbtNetworkService/listNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &ubtNetworkServiceListNetworksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UbtNetworkService_ListNetworksClient interface {
	Recv() (*Network, error)
	grpc.ClientStream
}

type ubtNetworkServiceListNetworksClient struct {
	grpc.ClientStream
}

func (x *ubtNetworkServiceListNetworksClient) Recv() (*Network, error) {
	m := new(Network)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UbtNetworkServiceServer is the server API for UbtNetworkService service.
// All implementations must embed UnimplementedUbtNetworkServiceServer
// for forward compatibility
type UbtNetworkServiceServer interface {
	GetNetwork(context.Context, *NetworkId) (*Network, error)
	// rpc getNetworkStatus(NetworkId) returns (NetworkStatus);
	ListNetworks(*ListNetworksRequest, UbtNetworkService_ListNetworksServer) error
	mustEmbedUnimplementedUbtNetworkServiceServer()
}

// UnimplementedUbtNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUbtNetworkServiceServer struct {
}

func (UnimplementedUbtNetworkServiceServer) GetNetwork(context.Context, *NetworkId) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedUbtNetworkServiceServer) ListNetworks(*ListNetworksRequest, UbtNetworkService_ListNetworksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedUbtNetworkServiceServer) mustEmbedUnimplementedUbtNetworkServiceServer() {}

// UnsafeUbtNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UbtNetworkServiceServer will
// result in compilation errors.
type UnsafeUbtNetworkServiceServer interface {
	mustEmbedUnimplementedUbtNetworkServiceServer()
}

func RegisterUbtNetworkServiceServer(s grpc.ServiceRegistrar, srv UbtNetworkServiceServer) {
	s.RegisterService(&UbtNetworkService_ServiceDesc, srv)
}

func _UbtNetworkService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtNetworkServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubt.services.UbtNetworkService/getNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtNetworkServiceServer).GetNetwork(ctx, req.(*NetworkId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtNetworkService_ListNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNetworksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UbtNetworkServiceServer).ListNetworks(m, &ubtNetworkServiceListNetworksServer{stream})
}

type UbtNetworkService_ListNetworksServer interface {
	Send(*Network) error
	grpc.ServerStream
}

type ubtNetworkServiceListNetworksServer struct {
	grpc.ServerStream
}

func (x *ubtNetworkServiceListNetworksServer) Send(m *Network) error {
	return x.ServerStream.SendMsg(m)
}

// UbtNetworkService_ServiceDesc is the grpc.ServiceDesc for UbtNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UbtNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubt.services.UbtNetworkService",
	HandlerType: (*UbtNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getNetwork",
			Handler:    _UbtNetworkService_GetNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listNetworks",
			Handler:       _UbtNetworkService_ListNetworks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/network.proto",
}
