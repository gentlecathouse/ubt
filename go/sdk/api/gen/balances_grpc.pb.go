// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/balances.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UbtBalanceServiceClient is the client API for UbtBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UbtBalanceServiceClient interface {
	// return account balance for specified currency
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// list all balances for account
	ListAccountBalances(ctx context.Context, in *ListAccountBalancesRequest, opts ...grpc.CallOption) (*ListAccountBalancesResponse, error)
	// list all holders for currency
	ListCurrencyHolders(ctx context.Context, in *ListCurrencyHoldersRequest, opts ...grpc.CallOption) (*ListCurrencyHoldersResponse, error)
}

type ubtBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUbtBalanceServiceClient(cc grpc.ClientConnInterface) UbtBalanceServiceClient {
	return &ubtBalanceServiceClient{cc}
}

func (c *ubtBalanceServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/ubt.services.UbtBalanceService/getBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtBalanceServiceClient) ListAccountBalances(ctx context.Context, in *ListAccountBalancesRequest, opts ...grpc.CallOption) (*ListAccountBalancesResponse, error) {
	out := new(ListAccountBalancesResponse)
	err := c.cc.Invoke(ctx, "/ubt.services.UbtBalanceService/listAccountBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ubtBalanceServiceClient) ListCurrencyHolders(ctx context.Context, in *ListCurrencyHoldersRequest, opts ...grpc.CallOption) (*ListCurrencyHoldersResponse, error) {
	out := new(ListCurrencyHoldersResponse)
	err := c.cc.Invoke(ctx, "/ubt.services.UbtBalanceService/listCurrencyHolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UbtBalanceServiceServer is the server API for UbtBalanceService service.
// All implementations must embed UnimplementedUbtBalanceServiceServer
// for forward compatibility
type UbtBalanceServiceServer interface {
	// return account balance for specified currency
	GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error)
	// list all balances for account
	ListAccountBalances(context.Context, *ListAccountBalancesRequest) (*ListAccountBalancesResponse, error)
	// list all holders for currency
	ListCurrencyHolders(context.Context, *ListCurrencyHoldersRequest) (*ListCurrencyHoldersResponse, error)
	mustEmbedUnimplementedUbtBalanceServiceServer()
}

// UnimplementedUbtBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUbtBalanceServiceServer struct {
}

func (UnimplementedUbtBalanceServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedUbtBalanceServiceServer) ListAccountBalances(context.Context, *ListAccountBalancesRequest) (*ListAccountBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountBalances not implemented")
}
func (UnimplementedUbtBalanceServiceServer) ListCurrencyHolders(context.Context, *ListCurrencyHoldersRequest) (*ListCurrencyHoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencyHolders not implemented")
}
func (UnimplementedUbtBalanceServiceServer) mustEmbedUnimplementedUbtBalanceServiceServer() {}

// UnsafeUbtBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UbtBalanceServiceServer will
// result in compilation errors.
type UnsafeUbtBalanceServiceServer interface {
	mustEmbedUnimplementedUbtBalanceServiceServer()
}

func RegisterUbtBalanceServiceServer(s grpc.ServiceRegistrar, srv UbtBalanceServiceServer) {
	s.RegisterService(&UbtBalanceService_ServiceDesc, srv)
}

func _UbtBalanceService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtBalanceServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubt.services.UbtBalanceService/getBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtBalanceServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtBalanceService_ListAccountBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtBalanceServiceServer).ListAccountBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubt.services.UbtBalanceService/listAccountBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtBalanceServiceServer).ListAccountBalances(ctx, req.(*ListAccountBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UbtBalanceService_ListCurrencyHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrencyHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UbtBalanceServiceServer).ListCurrencyHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubt.services.UbtBalanceService/listCurrencyHolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UbtBalanceServiceServer).ListCurrencyHolders(ctx, req.(*ListCurrencyHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UbtBalanceService_ServiceDesc is the grpc.ServiceDesc for UbtBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UbtBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ubt.services.UbtBalanceService",
	HandlerType: (*UbtBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBalance",
			Handler:    _UbtBalanceService_GetBalance_Handler,
		},
		{
			MethodName: "listAccountBalances",
			Handler:    _UbtBalanceService_ListAccountBalances_Handler,
		},
		{
			MethodName: "listCurrencyHolders",
			Handler:    _UbtBalanceService_ListCurrencyHolders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/balances.proto",
}
