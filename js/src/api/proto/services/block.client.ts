// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/block.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UbtBlockService } from "./block";
import type { DeriveAccountRequest } from "./block";
import type { Account } from "../models";
import type { GetAccountRequest } from "./block";
import type { ListBlocksRequest } from "./block";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Block } from "../models";
import type { BlockRequest } from "./block";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * *
 * Simple access to block and block information. In most cases does not require any indexing/storage to implement
 *
 * @generated from protobuf service ubt.services.UbtBlockService
 */
export interface IUbtBlockServiceClient {
    /**
     * Fetch block by ID
     *
     * @generated from protobuf rpc: getBlock(ubt.services.BlockRequest) returns (ubt.Block);
     */
    getBlock(input: BlockRequest, options?: RpcOptions): UnaryCall<BlockRequest, Block>;
    /**
     * List blocks in range. If count is not specified, returns all blocks starting from start_number
     *
     * @generated from protobuf rpc: listBlocks(ubt.services.ListBlocksRequest) returns (stream ubt.Block);
     */
    listBlocks(input: ListBlocksRequest, options?: RpcOptions): ServerStreamingCall<ListBlocksRequest, Block>;
    /**
     * Get blockchain account
     *
     * @generated from protobuf rpc: getAccount(ubt.services.GetAccountRequest) returns (ubt.Account);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, Account>;
    /**
     * Recorver account/address by public key
     *
     * @generated from protobuf rpc: deriveAccount(ubt.services.DeriveAccountRequest) returns (ubt.Account);
     */
    deriveAccount(input: DeriveAccountRequest, options?: RpcOptions): UnaryCall<DeriveAccountRequest, Account>;
}
/**
 * *
 * Simple access to block and block information. In most cases does not require any indexing/storage to implement
 *
 * @generated from protobuf service ubt.services.UbtBlockService
 */
export class UbtBlockServiceClient implements IUbtBlockServiceClient, ServiceInfo {
    typeName = UbtBlockService.typeName;
    methods = UbtBlockService.methods;
    options = UbtBlockService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Fetch block by ID
     *
     * @generated from protobuf rpc: getBlock(ubt.services.BlockRequest) returns (ubt.Block);
     */
    getBlock(input: BlockRequest, options?: RpcOptions): UnaryCall<BlockRequest, Block> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BlockRequest, Block>("unary", this._transport, method, opt, input);
    }
    /**
     * List blocks in range. If count is not specified, returns all blocks starting from start_number
     *
     * @generated from protobuf rpc: listBlocks(ubt.services.ListBlocksRequest) returns (stream ubt.Block);
     */
    listBlocks(input: ListBlocksRequest, options?: RpcOptions): ServerStreamingCall<ListBlocksRequest, Block> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListBlocksRequest, Block>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get blockchain account
     *
     * @generated from protobuf rpc: getAccount(ubt.services.GetAccountRequest) returns (ubt.Account);
     */
    getAccount(input: GetAccountRequest, options?: RpcOptions): UnaryCall<GetAccountRequest, Account> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAccountRequest, Account>("unary", this._transport, method, opt, input);
    }
    /**
     * Recorver account/address by public key
     *
     * @generated from protobuf rpc: deriveAccount(ubt.services.DeriveAccountRequest) returns (ubt.Account);
     */
    deriveAccount(input: DeriveAccountRequest, options?: RpcOptions): UnaryCall<DeriveAccountRequest, Account> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeriveAccountRequest, Account>("unary", this._transport, method, opt, input);
    }
}
