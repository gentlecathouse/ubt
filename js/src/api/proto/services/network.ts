// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/network.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import { Chain } from "../models";
import { ChainId } from "../models";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Block } from "../models";
/**
 * @generated from protobuf message ubt.services.ChainStatus
 */
export interface ChainStatus {
    /**
     * @generated from protobuf field: bool ready = 1;
     */
    ready: boolean;
    /**
     * @generated from protobuf field: ubt.Block head = 2;
     */
    head?: Block;
}
/**
 * @generated from protobuf message ubt.services.ListChainsRequest
 */
export interface ListChainsRequest {
    /**
     * @generated from protobuf field: optional string type = 1;
     */
    type?: string; // tron, ethereum, etc..
}
// @generated message type with reflection information, may provide speed optimized methods
class ChainStatus$Type extends MessageType<ChainStatus> {
    constructor() {
        super("ubt.services.ChainStatus", [
            { no: 1, name: "ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "head", kind: "message", T: () => Block }
        ]);
    }
    create(value?: PartialMessage<ChainStatus>): ChainStatus {
        const message = { ready: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChainStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChainStatus): ChainStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ready */ 1:
                    message.ready = reader.bool();
                    break;
                case /* ubt.Block head */ 2:
                    message.head = Block.internalBinaryRead(reader, reader.uint32(), options, message.head);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChainStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ready = 1; */
        if (message.ready !== false)
            writer.tag(1, WireType.Varint).bool(message.ready);
        /* ubt.Block head = 2; */
        if (message.head)
            Block.internalBinaryWrite(message.head, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ChainStatus
 */
export const ChainStatus = new ChainStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChainsRequest$Type extends MessageType<ListChainsRequest> {
    constructor() {
        super("ubt.services.ListChainsRequest", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListChainsRequest>): ListChainsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChainsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChainsRequest): ListChainsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListChainsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ListChainsRequest
 */
export const ListChainsRequest = new ListChainsRequest$Type();
/**
 * @generated ServiceType for protobuf service ubt.services.UbtChainService
 */
export const UbtChainService = new ServiceType("ubt.services.UbtChainService", [
    { name: "getChain", options: {}, I: ChainId, O: Chain },
    { name: "listChains", serverStreaming: true, options: {}, I: ListChainsRequest, O: Chain }
]);
