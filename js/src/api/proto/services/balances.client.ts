// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/balances.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UbtBalanceService } from "./balances";
import type { ListCurrencyHoldersResponse } from "./balances";
import type { ListCurrencyHoldersRequest } from "./balances";
import type { ListAccountBalancesResponse } from "./balances";
import type { ListAccountBalancesRequest } from "./balances";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { BalanceResponse } from "./balances";
import type { GetBalanceRequest } from "./balances";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ubt.services.UbtBalanceService
 */
export interface IUbtBalanceServiceClient {
    /**
     * return account balance for specified currency
     *
     * @generated from protobuf rpc: getBalance(ubt.services.GetBalanceRequest) returns (ubt.services.BalanceResponse);
     */
    getBalance(input: GetBalanceRequest, options?: RpcOptions): UnaryCall<GetBalanceRequest, BalanceResponse>;
    /**
     * list all balances for account
     *
     * @generated from protobuf rpc: listAccountBalances(ubt.services.ListAccountBalancesRequest) returns (ubt.services.ListAccountBalancesResponse);
     */
    listAccountBalances(input: ListAccountBalancesRequest, options?: RpcOptions): UnaryCall<ListAccountBalancesRequest, ListAccountBalancesResponse>;
    /**
     * list all holders for currency
     *
     * @generated from protobuf rpc: listCurrencyHolders(ubt.services.ListCurrencyHoldersRequest) returns (ubt.services.ListCurrencyHoldersResponse);
     */
    listCurrencyHolders(input: ListCurrencyHoldersRequest, options?: RpcOptions): UnaryCall<ListCurrencyHoldersRequest, ListCurrencyHoldersResponse>;
}
/**
 * @generated from protobuf service ubt.services.UbtBalanceService
 */
export class UbtBalanceServiceClient implements IUbtBalanceServiceClient, ServiceInfo {
    typeName = UbtBalanceService.typeName;
    methods = UbtBalanceService.methods;
    options = UbtBalanceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * return account balance for specified currency
     *
     * @generated from protobuf rpc: getBalance(ubt.services.GetBalanceRequest) returns (ubt.services.BalanceResponse);
     */
    getBalance(input: GetBalanceRequest, options?: RpcOptions): UnaryCall<GetBalanceRequest, BalanceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBalanceRequest, BalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * list all balances for account
     *
     * @generated from protobuf rpc: listAccountBalances(ubt.services.ListAccountBalancesRequest) returns (ubt.services.ListAccountBalancesResponse);
     */
    listAccountBalances(input: ListAccountBalancesRequest, options?: RpcOptions): UnaryCall<ListAccountBalancesRequest, ListAccountBalancesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAccountBalancesRequest, ListAccountBalancesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * list all holders for currency
     *
     * @generated from protobuf rpc: listCurrencyHolders(ubt.services.ListCurrencyHoldersRequest) returns (ubt.services.ListCurrencyHoldersResponse);
     */
    listCurrencyHolders(input: ListCurrencyHoldersRequest, options?: RpcOptions): UnaryCall<ListCurrencyHoldersRequest, ListCurrencyHoldersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCurrencyHoldersRequest, ListCurrencyHoldersResponse>("unary", this._transport, method, opt, input);
    }
}
