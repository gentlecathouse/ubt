// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/ext/trx.proto" (package "ubt.services.ext", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { uint256 } from "../../commons";
import { ChainId } from "../../models";
/**
 * @generated from protobuf message ubt.services.ext.TransactionInfoRequest
 */
export interface TransactionInfoRequest {
    /**
     * @generated from protobuf field: ubt.ChainId chain_id = 1;
     */
    chainId?: ChainId;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message ubt.services.ext.TransactionInfoResponse
 */
export interface TransactionInfoResponse {
    /**
     * @generated from protobuf field: ubt.uint256 effective_fee = 2;
     */
    effectiveFee?: uint256; // actual fee in native blockchain currency
}
// @generated message type with reflection information, may provide speed optimized methods
class TransactionInfoRequest$Type extends MessageType<TransactionInfoRequest> {
    constructor() {
        super("ubt.services.ext.TransactionInfoRequest", [
            { no: 1, name: "chain_id", kind: "message", T: () => ChainId },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransactionInfoRequest>): TransactionInfoRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransactionInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionInfoRequest): TransactionInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ubt.ChainId chain_id */ 1:
                    message.chainId = ChainId.internalBinaryRead(reader, reader.uint32(), options, message.chainId);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ubt.ChainId chain_id = 1; */
        if (message.chainId)
            ChainId.internalBinaryWrite(message.chainId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ext.TransactionInfoRequest
 */
export const TransactionInfoRequest = new TransactionInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionInfoResponse$Type extends MessageType<TransactionInfoResponse> {
    constructor() {
        super("ubt.services.ext.TransactionInfoResponse", [
            { no: 2, name: "effective_fee", kind: "message", T: () => uint256 }
        ]);
    }
    create(value?: PartialMessage<TransactionInfoResponse>): TransactionInfoResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransactionInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionInfoResponse): TransactionInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ubt.uint256 effective_fee */ 2:
                    message.effectiveFee = uint256.internalBinaryRead(reader, reader.uint32(), options, message.effectiveFee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ubt.uint256 effective_fee = 2; */
        if (message.effectiveFee)
            uint256.internalBinaryWrite(message.effectiveFee, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ext.TransactionInfoResponse
 */
export const TransactionInfoResponse = new TransactionInfoResponse$Type();
/**
 * @generated ServiceType for protobuf service ubt.services.ext.Trx
 */
export const Trx = new ServiceType("ubt.services.ext.Trx", [
    { name: "getTransactionInfo", options: {}, I: TransactionInfoRequest, O: TransactionInfoResponse }
]);
