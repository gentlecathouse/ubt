// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/network.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UbtChainService } from "./network";
import type { ListChainsRequest } from "./network";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Chain } from "../models";
import type { ChainId } from "../models";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ubt.services.UbtChainService
 */
export interface IUbtChainServiceClient {
    /**
     * @generated from protobuf rpc: getChain(ubt.ChainId) returns (ubt.Chain);
     */
    getChain(input: ChainId, options?: RpcOptions): UnaryCall<ChainId, Chain>;
    /**
     * rpc getChainStatus(ChainId) returns (ChainStatus);
     *
     * @generated from protobuf rpc: listChains(ubt.services.ListChainsRequest) returns (stream ubt.Chain);
     */
    listChains(input: ListChainsRequest, options?: RpcOptions): ServerStreamingCall<ListChainsRequest, Chain>;
}
/**
 * @generated from protobuf service ubt.services.UbtChainService
 */
export class UbtChainServiceClient implements IUbtChainServiceClient, ServiceInfo {
    typeName = UbtChainService.typeName;
    methods = UbtChainService.methods;
    options = UbtChainService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: getChain(ubt.ChainId) returns (ubt.Chain);
     */
    getChain(input: ChainId, options?: RpcOptions): UnaryCall<ChainId, Chain> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChainId, Chain>("unary", this._transport, method, opt, input);
    }
    /**
     * rpc getChainStatus(ChainId) returns (ChainStatus);
     *
     * @generated from protobuf rpc: listChains(ubt.services.ListChainsRequest) returns (stream ubt.Chain);
     */
    listChains(input: ListChainsRequest, options?: RpcOptions): ServerStreamingCall<ListChainsRequest, Chain> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListChainsRequest, Chain>("serverStreaming", this._transport, method, opt, input);
    }
}
