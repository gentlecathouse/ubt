// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/balances.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { uint256 } from "../commons";
import { Currency } from "../models";
import { CurrencyAmount } from "../models";
import { NetworkId } from "../models";
/**
 * @generated from protobuf message ubt.services.GetBalanceRequest
 */
export interface GetBalanceRequest {
    /**
     * @generated from protobuf field: ubt.NetworkId network_id = 1;
     */
    networkId?: NetworkId;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: string currency_id = 3;
     */
    currencyId: string;
}
/**
 * @generated from protobuf message ubt.services.BalanceResponse
 */
export interface BalanceResponse {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: ubt.CurrencyAmount amount = 2;
     */
    amount?: CurrencyAmount;
    /**
     * @generated from protobuf field: uint64 last_update = 3;
     */
    lastUpdate: bigint; // last update block number
}
/**
 * @generated from protobuf message ubt.services.ListAccountBalancesRequest
 */
export interface ListAccountBalancesRequest {
    /**
     * @generated from protobuf field: ubt.NetworkId network_id = 1;
     */
    networkId?: NetworkId;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: repeated string currency_ids = 3;
     */
    currencyIds: string[];
}
/**
 * @generated from protobuf message ubt.services.ListAccountBalancesResponse
 */
export interface ListAccountBalancesResponse {
    /**
     * @generated from protobuf field: repeated ubt.CurrencyAmount amounts = 1;
     */
    amounts: CurrencyAmount[];
    /**
     * @generated from protobuf field: repeated ubt.Currency currencies = 2;
     */
    currencies: Currency[];
}
/**
 * @generated from protobuf message ubt.services.ListCurrencyHoldersRequest
 */
export interface ListCurrencyHoldersRequest {
    /**
     * @generated from protobuf field: ubt.NetworkId network_id = 1;
     */
    networkId?: NetworkId;
    /**
     * @generated from protobuf field: string currency_id = 2;
     */
    currencyId: string;
}
/**
 * @generated from protobuf message ubt.services.ListCurrencyHoldersResponse
 */
export interface ListCurrencyHoldersResponse {
    /**
     * @generated from protobuf field: map<string, ubt.uint256> balances = 1;
     */
    balances: {
        [key: string]: uint256;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetBalanceRequest$Type extends MessageType<GetBalanceRequest> {
    constructor() {
        super("ubt.services.GetBalanceRequest", [
            { no: 1, name: "network_id", kind: "message", T: () => NetworkId },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "currency_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBalanceRequest>): GetBalanceRequest {
        const message = { address: "", currencyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBalanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBalanceRequest): GetBalanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ubt.NetworkId network_id */ 1:
                    message.networkId = NetworkId.internalBinaryRead(reader, reader.uint32(), options, message.networkId);
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string currency_id */ 3:
                    message.currencyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBalanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ubt.NetworkId network_id = 1; */
        if (message.networkId)
            NetworkId.internalBinaryWrite(message.networkId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string currency_id = 3; */
        if (message.currencyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currencyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.GetBalanceRequest
 */
export const GetBalanceRequest = new GetBalanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BalanceResponse$Type extends MessageType<BalanceResponse> {
    constructor() {
        super("ubt.services.BalanceResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "amount", kind: "message", T: () => CurrencyAmount },
            { no: 3, name: "last_update", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BalanceResponse>): BalanceResponse {
        const message = { address: "", lastUpdate: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BalanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceResponse): BalanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* ubt.CurrencyAmount amount */ 2:
                    message.amount = CurrencyAmount.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* uint64 last_update */ 3:
                    message.lastUpdate = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BalanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* ubt.CurrencyAmount amount = 2; */
        if (message.amount)
            CurrencyAmount.internalBinaryWrite(message.amount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 last_update = 3; */
        if (message.lastUpdate !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.lastUpdate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.BalanceResponse
 */
export const BalanceResponse = new BalanceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAccountBalancesRequest$Type extends MessageType<ListAccountBalancesRequest> {
    constructor() {
        super("ubt.services.ListAccountBalancesRequest", [
            { no: 1, name: "network_id", kind: "message", T: () => NetworkId },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "currency_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListAccountBalancesRequest>): ListAccountBalancesRequest {
        const message = { address: "", currencyIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAccountBalancesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAccountBalancesRequest): ListAccountBalancesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ubt.NetworkId network_id */ 1:
                    message.networkId = NetworkId.internalBinaryRead(reader, reader.uint32(), options, message.networkId);
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* repeated string currency_ids */ 3:
                    message.currencyIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAccountBalancesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ubt.NetworkId network_id = 1; */
        if (message.networkId)
            NetworkId.internalBinaryWrite(message.networkId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* repeated string currency_ids = 3; */
        for (let i = 0; i < message.currencyIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.currencyIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ListAccountBalancesRequest
 */
export const ListAccountBalancesRequest = new ListAccountBalancesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAccountBalancesResponse$Type extends MessageType<ListAccountBalancesResponse> {
    constructor() {
        super("ubt.services.ListAccountBalancesResponse", [
            { no: 1, name: "amounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CurrencyAmount },
            { no: 2, name: "currencies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Currency }
        ]);
    }
    create(value?: PartialMessage<ListAccountBalancesResponse>): ListAccountBalancesResponse {
        const message = { amounts: [], currencies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAccountBalancesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAccountBalancesResponse): ListAccountBalancesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ubt.CurrencyAmount amounts */ 1:
                    message.amounts.push(CurrencyAmount.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ubt.Currency currencies */ 2:
                    message.currencies.push(Currency.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAccountBalancesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ubt.CurrencyAmount amounts = 1; */
        for (let i = 0; i < message.amounts.length; i++)
            CurrencyAmount.internalBinaryWrite(message.amounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ubt.Currency currencies = 2; */
        for (let i = 0; i < message.currencies.length; i++)
            Currency.internalBinaryWrite(message.currencies[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ListAccountBalancesResponse
 */
export const ListAccountBalancesResponse = new ListAccountBalancesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCurrencyHoldersRequest$Type extends MessageType<ListCurrencyHoldersRequest> {
    constructor() {
        super("ubt.services.ListCurrencyHoldersRequest", [
            { no: 1, name: "network_id", kind: "message", T: () => NetworkId },
            { no: 2, name: "currency_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListCurrencyHoldersRequest>): ListCurrencyHoldersRequest {
        const message = { currencyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCurrencyHoldersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCurrencyHoldersRequest): ListCurrencyHoldersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ubt.NetworkId network_id */ 1:
                    message.networkId = NetworkId.internalBinaryRead(reader, reader.uint32(), options, message.networkId);
                    break;
                case /* string currency_id */ 2:
                    message.currencyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCurrencyHoldersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ubt.NetworkId network_id = 1; */
        if (message.networkId)
            NetworkId.internalBinaryWrite(message.networkId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string currency_id = 2; */
        if (message.currencyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currencyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ListCurrencyHoldersRequest
 */
export const ListCurrencyHoldersRequest = new ListCurrencyHoldersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCurrencyHoldersResponse$Type extends MessageType<ListCurrencyHoldersResponse> {
    constructor() {
        super("ubt.services.ListCurrencyHoldersResponse", [
            { no: 1, name: "balances", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => uint256 } }
        ]);
    }
    create(value?: PartialMessage<ListCurrencyHoldersResponse>): ListCurrencyHoldersResponse {
        const message = { balances: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCurrencyHoldersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCurrencyHoldersResponse): ListCurrencyHoldersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, ubt.uint256> balances */ 1:
                    this.binaryReadMap1(message.balances, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ListCurrencyHoldersResponse["balances"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ListCurrencyHoldersResponse["balances"] | undefined, val: ListCurrencyHoldersResponse["balances"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = uint256.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ubt.services.ListCurrencyHoldersResponse.balances");
            }
        }
        map[key ?? ""] = val ?? uint256.create();
    }
    internalBinaryWrite(message: ListCurrencyHoldersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, ubt.uint256> balances = 1; */
        for (let k of Object.keys(message.balances)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            uint256.internalBinaryWrite(message.balances[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ubt.services.ListCurrencyHoldersResponse
 */
export const ListCurrencyHoldersResponse = new ListCurrencyHoldersResponse$Type();
/**
 * @generated ServiceType for protobuf service ubt.services.UbtBalanceService
 */
export const UbtBalanceService = new ServiceType("ubt.services.UbtBalanceService", [
    { name: "getBalance", options: {}, I: GetBalanceRequest, O: BalanceResponse },
    { name: "listAccountBalances", options: {}, I: ListAccountBalancesRequest, O: ListAccountBalancesResponse },
    { name: "listCurrencyHolders", options: {}, I: ListCurrencyHoldersRequest, O: ListCurrencyHoldersResponse }
]);
