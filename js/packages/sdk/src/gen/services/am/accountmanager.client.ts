// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/am/accountmanager.proto" (package "ubt.services.am", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UbtAccountManager } from "./accountmanager";
import type { SignPayloadResponse } from "./accountmanager";
import type { SignPayloadRequest } from "./accountmanager";
import type { ListAccountsResponse } from "./accountmanager";
import type { ListAccountsRequest } from "./accountmanager";
import type { HasAccountResponse } from "./accountmanager";
import type { HasAccountRequest } from "./accountmanager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateAccountResponse } from "./accountmanager";
import type { CreateAccountRequest } from "./accountmanager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ubt.services.am.UbtAccountManager
 */
export interface IUbtAccountManagerClient {
    /**
     * @generated from protobuf rpc: CreateAccount(ubt.services.am.CreateAccountRequest) returns (ubt.services.am.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, options?: RpcOptions): UnaryCall<CreateAccountRequest, CreateAccountResponse>;
    /**
     * @generated from protobuf rpc: HasAccount(ubt.services.am.HasAccountRequest) returns (ubt.services.am.HasAccountResponse);
     */
    hasAccount(input: HasAccountRequest, options?: RpcOptions): UnaryCall<HasAccountRequest, HasAccountResponse>;
    /**
     * @generated from protobuf rpc: ListAccounts(ubt.services.am.ListAccountsRequest) returns (ubt.services.am.ListAccountsResponse);
     */
    listAccounts(input: ListAccountsRequest, options?: RpcOptions): UnaryCall<ListAccountsRequest, ListAccountsResponse>;
    /**
     * @generated from protobuf rpc: SignPayload(ubt.services.am.SignPayloadRequest) returns (ubt.services.am.SignPayloadResponse);
     */
    signPayload(input: SignPayloadRequest, options?: RpcOptions): UnaryCall<SignPayloadRequest, SignPayloadResponse>;
}
/**
 * @generated from protobuf service ubt.services.am.UbtAccountManager
 */
export class UbtAccountManagerClient implements IUbtAccountManagerClient, ServiceInfo {
    typeName = UbtAccountManager.typeName;
    methods = UbtAccountManager.methods;
    options = UbtAccountManager.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateAccount(ubt.services.am.CreateAccountRequest) returns (ubt.services.am.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, options?: RpcOptions): UnaryCall<CreateAccountRequest, CreateAccountResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAccountRequest, CreateAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HasAccount(ubt.services.am.HasAccountRequest) returns (ubt.services.am.HasAccountResponse);
     */
    hasAccount(input: HasAccountRequest, options?: RpcOptions): UnaryCall<HasAccountRequest, HasAccountResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HasAccountRequest, HasAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListAccounts(ubt.services.am.ListAccountsRequest) returns (ubt.services.am.ListAccountsResponse);
     */
    listAccounts(input: ListAccountsRequest, options?: RpcOptions): UnaryCall<ListAccountsRequest, ListAccountsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAccountsRequest, ListAccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SignPayload(ubt.services.am.SignPayloadRequest) returns (ubt.services.am.SignPayloadResponse);
     */
    signPayload(input: SignPayloadRequest, options?: RpcOptions): UnaryCall<SignPayloadRequest, SignPayloadResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignPayloadRequest, SignPayloadResponse>("unary", this._transport, method, opt, input);
    }
}
