// @generated by protobuf-ts 2.9.0 with parameter long_type_bigint,server_generic
// @generated from protobuf file "services/network.proto" (package "ubt.services", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UbtNetworkService } from "./network";
import type { ListNetworksRequest } from "./network";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Network } from "../models";
import type { NetworkId } from "../models";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ubt.services.UbtNetworkService
 */
export interface IUbtNetworkServiceClient {
    /**
     * @generated from protobuf rpc: getNetwork(ubt.NetworkId) returns (ubt.Network);
     */
    getNetwork(input: NetworkId, options?: RpcOptions): UnaryCall<NetworkId, Network>;
    /**
     * rpc getNetworkStatus(NetworkId) returns (NetworkStatus);
     *
     * @generated from protobuf rpc: listNetworks(ubt.services.ListNetworksRequest) returns (stream ubt.Network);
     */
    listNetworks(input: ListNetworksRequest, options?: RpcOptions): ServerStreamingCall<ListNetworksRequest, Network>;
}
/**
 * @generated from protobuf service ubt.services.UbtNetworkService
 */
export class UbtNetworkServiceClient implements IUbtNetworkServiceClient, ServiceInfo {
    typeName = UbtNetworkService.typeName;
    methods = UbtNetworkService.methods;
    options = UbtNetworkService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: getNetwork(ubt.NetworkId) returns (ubt.Network);
     */
    getNetwork(input: NetworkId, options?: RpcOptions): UnaryCall<NetworkId, Network> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NetworkId, Network>("unary", this._transport, method, opt, input);
    }
    /**
     * rpc getNetworkStatus(NetworkId) returns (NetworkStatus);
     *
     * @generated from protobuf rpc: listNetworks(ubt.services.ListNetworksRequest) returns (stream ubt.Network);
     */
    listNetworks(input: ListNetworksRequest, options?: RpcOptions): ServerStreamingCall<ListNetworksRequest, Network> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListNetworksRequest, Network>("serverStreaming", this._transport, method, opt, input);
    }
}
