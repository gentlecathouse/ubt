plugins {
    id "java-library"
    id "com.google.protobuf" version "0.9.4"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "maven-publish"
    id "signing"
}

group 'io.github.ubtr'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'javax.annotation:javax.annotation-api:1.3.2' 

    compileOnly group: 'com.google.protobuf', name: 'protobuf-java', version: '3.25.1'
    compileOnly group: 'io.grpc', name: 'grpc-all', version: '1.60.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }

    withJavadocJar()
    withSourcesJar()
}

tasks.named('test') {
    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.60.1'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = project.name
                description = 'UBT Java sdk'
                url = 'https://github.com/ubtr/ubt'
                inceptionYear = '2023'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/license/mit/'
                    }
                }
                developers {
                    developer {
                        id = 'jaspeen'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/ubtr/ubt.git'
                    developerConnection = 'scm:git:https://github.com/ubtr/ubt.git'
                    url = 'http://github.com/ubtr/ubt'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    def gpgKey = findProperty("gpgKey")
    def gpgPassphrase = findProperty("gpgPassphrase")
    useInMemoryPgpKeys(gpgKey, gpgPassphrase)
    sign publishing.publications.maven
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("nexusUsername")
            password = findProperty("nexusPassword")
        }
    }
}
task checkVersion {
    doLast {
        def ver = findProperty("version")
        if (ver == 'unspecified') {
            throw new GradleException("invalid version, specify -Pversion=<x.y.z>")
        }
    }
}
publish.dependsOn checkVersion
/*
jreleaser {
    //dryrun = true
    project {
        java {
            multiProject = false
        }
    }
    release {
        generic {
            enabled = false
        }
        github {
            enabled = false
            overwrite = true
            skipTag = true
            draft = true
        }
    }
    gitRootSearch
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            nexus2 {
                central {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    applyMavenCentralRules = true
                    closeRepository = true
                    releaseRepository = false
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}*/